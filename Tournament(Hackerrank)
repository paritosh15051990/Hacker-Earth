import java.lang.*;
import java.util.*;
import java.io.*;

class mysort {
	List<String> mylist = new ArrayList<String>();
	public Comparator desc = new Comparator<ss>() {
		int count = 0, max = 0;
		String s;

		@Override
		public int compare(ss s1, ss s2) {
			return -s2.name.compareTo(s1.name);
		}

	};
}

class ss {
	String name;
	String matches;
}

class test {
	public static void main(String args[]) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int test = Integer.parseInt(br.readLine().trim());
		StringTokenizer st;
		mysort mm = new mysort();
		ss[] myss = new ss[test];
		String s;
		String[] ss = new String[test];
		for (int i = 0; i < test; i++) {
			s = br.readLine().trim();
			st = new StringTokenizer(s);
			myss[i] = new ss();
			if (st.hasMoreTokens()) {
				myss[i].name = st.nextToken();
				myss[i].matches = st.nextToken();
			}
		}
		Arrays.sort(myss, mm.desc);
		int z = 2 * test;
		int[] sim = new int[z];
		int[] sim2 = new int[z];
		int[] mymaxname = new int[z];
		List<String> ll = new ArrayList<String>();
		List<String> mat = new ArrayList<String>();
		for (int i = 0; i < test; i++) {

			ll.add(myss[i].name);
			mat.add(myss[i].matches);

		}

		ll.addAll(mat);
		Collections.sort(ll);
		SortedSet<String> ss1 = new TreeSet<String>();
		for (int i = 0; i < ll.size(); i++) {
			sim[i] = Collections.frequency(ll, ll.get(i));
			mymaxname[i] = Collections.frequency(ll, ll.get(i));
		}
		int[] sim3 = new int[z];
		int[] max3 = new int[z];
		int j = 0;
		for (int t = 0; t < sim3.length; t++) {
			if (t < test) {
				sim3[t] = sim[t];
				max3[t] = mymaxname[t];
			}
			if (t >= test) {
				sim3[t] = sim2[j];
				max3[t] = mymaxname[j];
				j++;
			}
		}
		Arrays.sort(mymaxname);
		int count = 0;
		int umax = mymaxname[mymaxname.length - 1];
		for (int p = 0; p < ll.size(); p++) {
			if (sim[p] == umax) {
				ss1.add(ll.get(p));

			}

		}
		for (String s1 : ss1) {
			count++;
		}
		System.out.println(count);
		for (String s1 : ss1)
			System.out.println(s1);
	}
}
